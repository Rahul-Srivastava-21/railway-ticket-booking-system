// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  password  String
  name      String
  role      String   @default("user") // Can be "user" or "admin"
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Booking Booking[]

  Payment Payment[]

  Ticket Ticket[]
}


model Ticket {
  id             Int      @id @default(autoincrement())
  userId         Int
  startStop      String   // e.g. 'A'
  endStop        String   // e.g. 'D'
  bookingStatus  String   // 'booked', 'available'
  seatNumber     String   // e.g. 'A1'
  paymentStatus  String   // 'pending', 'paid'
  bookingTime    DateTime @default(now())
  
  user           User     @relation(fields: [userId], references: [id])
}

model Train {
  id            Int        @id @default(autoincrement())
  name          String
  trainNumber   String     @unique
  route         Route[]    // One-to-many relationship with Route
  seats         Seat[]     // One-to-many relationship with Seat
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  Booking       Booking[]  // One-to-many relationship with Booking

  // The start and end stops are now part of the Train model
  startStopId   Int?
  endStopId     Int?
  startStop     Stop?      @relation("StartStop", fields: [startStopId], references: [id])
  endStop       Stop?      @relation("EndStop", fields: [endStopId], references: [id])

  RouteGroup RouteGroup[]
}


model Stop {
  id           Int        @id @default(autoincrement())
  name         String     @unique
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  routes       Route[]    // One-to-many relationship with Route
  startTrains  Train[]    @relation("StartStop") // Many-to-many relation with Train for start
  endTrains    Train[]    @relation("EndStop")   // Many-to-many relation with Train for end

  reservedSeatsFrom  Seat[]  @relation("ReservedFrom") // Many-to-one relationship with Seat from 'ReservedFrom'
  reservedSeatsTo    Seat[]  @relation("ReservedTo")   // Many-to-one relationship with Seat to 'ReservedTo'
}

model Route {
  id        Int      @id @default(autoincrement())
  trainId   Int?
  stopId    Int
  stopOrder Int      // The order of the stop in the train route
  routeGroupId Int   // New field to group stops of same route
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  train     Train?    @relation(fields: [trainId], references: [id])
  stop      Stop      @relation(fields: [stopId], references: [id])
  routeGroup RouteGroup @relation(fields: [routeGroupId], references: [id])
}

// New model to group routes
model RouteGroup {
  id        Int      @id @default(autoincrement())
  routes    Route[]
  trains    Train[]
}

enum SeatStatus {
  AVAILABLE
  RESERVED
}

enum BookingStatus {
  CONFIRMED
  CANCELLED
  WAITLIST
}

model Seat {
  id                Int     @id @default(autoincrement())
  trainId           Int
  seatNumber        String
  status            SeatStatus @default(AVAILABLE)
  reservedFromStop  Stop?   @relation("ReservedFrom", fields: [reservedFromStopId], references: [id])
  reservedToStop    Stop?   @relation("ReservedTo", fields: [reservedToStopId], references: [id])
  reservedFromStopId Int?
  reservedToStopId   Int?
  train             Train   @relation(fields: [trainId], references: [id],onDelete: Cascade)
  Booking           Booking[]
  
  @@unique([trainId, seatNumber]) // Ensures seat numbers are unique within a train
}

model Booking {
  id          Int      @id @default(autoincrement())
  userId      Int
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  trainId     Int
  train       Train    @relation(fields: [trainId], references: [id], onDelete: Cascade)
  seatId      Int
  seat        Seat     @relation(fields: [seatId], references: [id], onDelete: Cascade)
  status      BookingStatus @default(CONFIRMED)
  paymentId   Int?
  payment     Payment? @relation(fields: [paymentId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt @default(now())
}


model Payment {
  id          Int      @id @default(autoincrement())
  amount      Float
  status      String   @default("pending") // "pending", "completed", "failed"
  userId      Int
  user        User     @relation(fields: [userId], references: [id])

  Booking Booking[]
}

